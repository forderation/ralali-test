// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/forderation/ralali-test/internal/model"
	"sync"
)

// Ensure, that CakeUsecaseInterfaceMock does implement CakeUsecaseInterface.
// If this is not the case, regenerate this file with moq.
var _ CakeUsecaseInterface = &CakeUsecaseInterfaceMock{}

// CakeUsecaseInterfaceMock is a mock implementation of CakeUsecaseInterface.
//
//	func TestSomethingThatUsesCakeUsecaseInterface(t *testing.T) {
//
//		// make and configure a mocked CakeUsecaseInterface
//		mockedCakeUsecaseInterface := &CakeUsecaseInterfaceMock{
//			CreateCakeFunc: func(ctx context.Context, payload model.CakePayloadQuery) (*model.CakeMutationResponse, *model.ErrorResponse) {
//				panic("mock out the CreateCake method")
//			},
//			DeleteCakeFunc: func(ctx context.Context, id int) (*model.CakeDeleteResponse, *model.ErrorResponse) {
//				panic("mock out the DeleteCake method")
//			},
//			GetCakesFunc: func(ctx context.Context, param model.GetCakesUsecaseParam) (*model.GetCakesResponse, *model.ErrorResponse) {
//				panic("mock out the GetCakes method")
//			},
//			GetDetailCakeFunc: func(ctx context.Context, id int) (*model.CakeResponse, *model.ErrorResponse) {
//				panic("mock out the GetDetailCake method")
//			},
//			UpdateCakeFunc: func(ctx context.Context, id int, payload model.CakePayloadQuery) (*model.CakeMutationResponse, *model.ErrorResponse) {
//				panic("mock out the UpdateCake method")
//			},
//		}
//
//		// use mockedCakeUsecaseInterface in code that requires CakeUsecaseInterface
//		// and then make assertions.
//
//	}
type CakeUsecaseInterfaceMock struct {
	// CreateCakeFunc mocks the CreateCake method.
	CreateCakeFunc func(ctx context.Context, payload model.CakePayloadQuery) (*model.CakeMutationResponse, *model.ErrorResponse)

	// DeleteCakeFunc mocks the DeleteCake method.
	DeleteCakeFunc func(ctx context.Context, id int) (*model.CakeDeleteResponse, *model.ErrorResponse)

	// GetCakesFunc mocks the GetCakes method.
	GetCakesFunc func(ctx context.Context, param model.GetCakesUsecaseParam) (*model.GetCakesResponse, *model.ErrorResponse)

	// GetDetailCakeFunc mocks the GetDetailCake method.
	GetDetailCakeFunc func(ctx context.Context, id int) (*model.CakeResponse, *model.ErrorResponse)

	// UpdateCakeFunc mocks the UpdateCake method.
	UpdateCakeFunc func(ctx context.Context, id int, payload model.CakePayloadQuery) (*model.CakeMutationResponse, *model.ErrorResponse)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCake holds details about calls to the CreateCake method.
		CreateCake []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload model.CakePayloadQuery
		}
		// DeleteCake holds details about calls to the DeleteCake method.
		DeleteCake []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetCakes holds details about calls to the GetCakes method.
		GetCakes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param model.GetCakesUsecaseParam
		}
		// GetDetailCake holds details about calls to the GetDetailCake method.
		GetDetailCake []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// UpdateCake holds details about calls to the UpdateCake method.
		UpdateCake []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
			// Payload is the payload argument value.
			Payload model.CakePayloadQuery
		}
	}
	lockCreateCake    sync.RWMutex
	lockDeleteCake    sync.RWMutex
	lockGetCakes      sync.RWMutex
	lockGetDetailCake sync.RWMutex
	lockUpdateCake    sync.RWMutex
}

// CreateCake calls CreateCakeFunc.
func (mock *CakeUsecaseInterfaceMock) CreateCake(ctx context.Context, payload model.CakePayloadQuery) (*model.CakeMutationResponse, *model.ErrorResponse) {
	if mock.CreateCakeFunc == nil {
		panic("CakeUsecaseInterfaceMock.CreateCakeFunc: method is nil but CakeUsecaseInterface.CreateCake was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Payload model.CakePayloadQuery
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockCreateCake.Lock()
	mock.calls.CreateCake = append(mock.calls.CreateCake, callInfo)
	mock.lockCreateCake.Unlock()
	return mock.CreateCakeFunc(ctx, payload)
}

// CreateCakeCalls gets all the calls that were made to CreateCake.
// Check the length with:
//
//	len(mockedCakeUsecaseInterface.CreateCakeCalls())
func (mock *CakeUsecaseInterfaceMock) CreateCakeCalls() []struct {
	Ctx     context.Context
	Payload model.CakePayloadQuery
} {
	var calls []struct {
		Ctx     context.Context
		Payload model.CakePayloadQuery
	}
	mock.lockCreateCake.RLock()
	calls = mock.calls.CreateCake
	mock.lockCreateCake.RUnlock()
	return calls
}

// DeleteCake calls DeleteCakeFunc.
func (mock *CakeUsecaseInterfaceMock) DeleteCake(ctx context.Context, id int) (*model.CakeDeleteResponse, *model.ErrorResponse) {
	if mock.DeleteCakeFunc == nil {
		panic("CakeUsecaseInterfaceMock.DeleteCakeFunc: method is nil but CakeUsecaseInterface.DeleteCake was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteCake.Lock()
	mock.calls.DeleteCake = append(mock.calls.DeleteCake, callInfo)
	mock.lockDeleteCake.Unlock()
	return mock.DeleteCakeFunc(ctx, id)
}

// DeleteCakeCalls gets all the calls that were made to DeleteCake.
// Check the length with:
//
//	len(mockedCakeUsecaseInterface.DeleteCakeCalls())
func (mock *CakeUsecaseInterfaceMock) DeleteCakeCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockDeleteCake.RLock()
	calls = mock.calls.DeleteCake
	mock.lockDeleteCake.RUnlock()
	return calls
}

// GetCakes calls GetCakesFunc.
func (mock *CakeUsecaseInterfaceMock) GetCakes(ctx context.Context, param model.GetCakesUsecaseParam) (*model.GetCakesResponse, *model.ErrorResponse) {
	if mock.GetCakesFunc == nil {
		panic("CakeUsecaseInterfaceMock.GetCakesFunc: method is nil but CakeUsecaseInterface.GetCakes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param model.GetCakesUsecaseParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockGetCakes.Lock()
	mock.calls.GetCakes = append(mock.calls.GetCakes, callInfo)
	mock.lockGetCakes.Unlock()
	return mock.GetCakesFunc(ctx, param)
}

// GetCakesCalls gets all the calls that were made to GetCakes.
// Check the length with:
//
//	len(mockedCakeUsecaseInterface.GetCakesCalls())
func (mock *CakeUsecaseInterfaceMock) GetCakesCalls() []struct {
	Ctx   context.Context
	Param model.GetCakesUsecaseParam
} {
	var calls []struct {
		Ctx   context.Context
		Param model.GetCakesUsecaseParam
	}
	mock.lockGetCakes.RLock()
	calls = mock.calls.GetCakes
	mock.lockGetCakes.RUnlock()
	return calls
}

// GetDetailCake calls GetDetailCakeFunc.
func (mock *CakeUsecaseInterfaceMock) GetDetailCake(ctx context.Context, id int) (*model.CakeResponse, *model.ErrorResponse) {
	if mock.GetDetailCakeFunc == nil {
		panic("CakeUsecaseInterfaceMock.GetDetailCakeFunc: method is nil but CakeUsecaseInterface.GetDetailCake was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDetailCake.Lock()
	mock.calls.GetDetailCake = append(mock.calls.GetDetailCake, callInfo)
	mock.lockGetDetailCake.Unlock()
	return mock.GetDetailCakeFunc(ctx, id)
}

// GetDetailCakeCalls gets all the calls that were made to GetDetailCake.
// Check the length with:
//
//	len(mockedCakeUsecaseInterface.GetDetailCakeCalls())
func (mock *CakeUsecaseInterfaceMock) GetDetailCakeCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetDetailCake.RLock()
	calls = mock.calls.GetDetailCake
	mock.lockGetDetailCake.RUnlock()
	return calls
}

// UpdateCake calls UpdateCakeFunc.
func (mock *CakeUsecaseInterfaceMock) UpdateCake(ctx context.Context, id int, payload model.CakePayloadQuery) (*model.CakeMutationResponse, *model.ErrorResponse) {
	if mock.UpdateCakeFunc == nil {
		panic("CakeUsecaseInterfaceMock.UpdateCakeFunc: method is nil but CakeUsecaseInterface.UpdateCake was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      int
		Payload model.CakePayloadQuery
	}{
		Ctx:     ctx,
		ID:      id,
		Payload: payload,
	}
	mock.lockUpdateCake.Lock()
	mock.calls.UpdateCake = append(mock.calls.UpdateCake, callInfo)
	mock.lockUpdateCake.Unlock()
	return mock.UpdateCakeFunc(ctx, id, payload)
}

// UpdateCakeCalls gets all the calls that were made to UpdateCake.
// Check the length with:
//
//	len(mockedCakeUsecaseInterface.UpdateCakeCalls())
func (mock *CakeUsecaseInterfaceMock) UpdateCakeCalls() []struct {
	Ctx     context.Context
	ID      int
	Payload model.CakePayloadQuery
} {
	var calls []struct {
		Ctx     context.Context
		ID      int
		Payload model.CakePayloadQuery
	}
	mock.lockUpdateCake.RLock()
	calls = mock.calls.UpdateCake
	mock.lockUpdateCake.RUnlock()
	return calls
}
